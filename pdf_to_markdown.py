#!/usr/bin/env python3
"""
PDF to Markdown Converter using Marker with Ollama LLM Enhancement
Supports single file conversion and batch processing with GPU acceleration
"""

import argparse
import os
import sys
import json
import logging
import requests
from pathlib import Path
from typing import Optional, List, Dict, Any
import tempfile
import subprocess
from datetime import datetime

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('conversion.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class OllamaClient:
    """Client for checking Ollama availability"""
    
    def __init__(self, base_url: str = "http://localhost:11434"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def is_available(self) -> bool:
        """Check if Ollama service is running"""
        try:
            response = self.session.get(f"{self.base_url}/api/tags", timeout=5)
            return response.status_code == 200
        except requests.RequestException:
            return False

class PDFToMarkdownConverter:
    """Main converter class using Marker with optional Ollama enhancement"""
    
    def __init__(self, use_llm: bool = False, use_gpu: bool = True, ollama_url: str = "http://localhost:11434", ollama_model: str = "granite3.2-vision:2b"):
        self.use_llm = use_llm
        self.use_gpu = use_gpu
        self.ollama_url = ollama_url
        self.ollama_model = ollama_model
        self.ollama_client = OllamaClient(base_url=ollama_url) if use_llm else None
        
        if use_llm and not self.ollama_client.is_available():
            logger.warning("Ollama service is not available. LLM enhancement will be disabled.")
            self.use_llm = False
    
    def convert_single_pdf(self, input_path: str, output_path: str = None) -> bool:
        """Convert a single PDF file to markdown"""
        try:
            input_file = Path(input_path)
            if not input_file.exists():
                logger.error(f"Input file not found: {input_path}")
                return False
            
            if not input_file.suffix.lower() == '.pdf':
                logger.error(f"Input file must be a PDF: {input_path}")
                return False
            
            if output_path is None:
                output_path = input_file.stem + '.md'
            
            output_file = Path(output_path)
            output_file.parent.mkdir(parents=True, exist_ok=True)
            
            logger.info(f"Converting {input_path} to {output_path}")
            
            # Use marker_single command
            cmd = ['marker_single', str(input_file), '--output_dir', str(output_file.parent)]
            
            if not self.use_gpu:
                cmd.extend(['--disable_gpu'])
            
            if self.use_llm:
                cmd.extend([
                    '--llm_service=marker.services.ollama.OllamaService',
                    f'--ollama_base_url={self.ollama_url}',
                    f'--ollama_model={self.ollama_model}'
                ])
            
            logger.info(f"Running command: {' '.join(cmd)}")
            
            # Run marker conversion
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=3600)
            
            if result.returncode != 0:
                logger.error(f"Marker conversion failed: {result.stderr}")
                return False
            
            # Find the generated markdown file - Marker creates a subdirectory
            marker_output_dir = output_file.parent / input_file.stem
            generated_files = list(marker_output_dir.glob(f"{input_file.stem}.md"))
            
            # Fallback: search in parent directory too
            if not generated_files:
                generated_files = list(output_file.parent.glob(f"{input_file.stem}*.md"))
            
            if not generated_files:
                logger.error("No markdown file generated by marker")
                return False
            
            generated_file = generated_files[0]
            
            # Markdown file is already processed by Marker with LLM if enabled
            
            logger.info(f"Successfully converted {input_path} to {generated_file}")
            return True
            
        except subprocess.TimeoutExpired:
            logger.error(f"Conversion timeout for {input_path}")
            return False
        except Exception as e:
            logger.error(f"Error converting {input_path}: {e}")
            return False
    
    def convert_batch(self, input_dir: str, output_dir: str = None) -> Dict[str, bool]:
        """Convert multiple PDF files from a directory"""
        input_path = Path(input_dir)
        if not input_path.exists():
            logger.error(f"Input directory not found: {input_dir}")
            return {}
        
        if output_dir is None:
            output_dir = input_path / "output"
        
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)
        
        pdf_files = list(input_path.glob("*.pdf"))
        if not pdf_files:
            logger.warning(f"No PDF files found in {input_dir}")
            return {}
        
        logger.info(f"Found {len(pdf_files)} PDF files to convert")
        
        results = {}
        for pdf_file in pdf_files:
            output_file = output_path / f"{pdf_file.stem}.md"
            success = self.convert_single_pdf(str(pdf_file), str(output_file))
            results[str(pdf_file)] = success
        
        successful = sum(results.values())
        logger.info(f"Batch conversion completed: {successful}/{len(pdf_files)} files converted successfully")
        
        return results
    
    def get_conversion_info(self) -> Dict[str, Any]:
        """Get information about the current conversion setup"""
        info = {
            "timestamp": datetime.now().isoformat(),
            "use_llm": self.use_llm,
            "use_gpu": self.use_gpu,
            "ollama_available": self.ollama_client.is_available() if self.ollama_client else False
        }
        
        if self.use_llm and self.ollama_client:
            info["ollama_model"] = self.ollama_model
            info["ollama_url"] = self.ollama_url
        
        return info

def main():
    parser = argparse.ArgumentParser(description="Convert PDF files to Markdown using Marker with optional Ollama LLM enhancement")
    parser.add_argument("input", nargs="?", help="Input PDF file or directory")
    parser.add_argument("-o", "--output", help="Output file or directory")
    parser.add_argument("--use-llm", action="store_true", help="Use Ollama LLM for enhancement")
    parser.add_argument("--no-gpu", action="store_true", help="Disable GPU acceleration")
    parser.add_argument("--ollama-url", default="http://localhost:11434", help="Ollama API URL")
    parser.add_argument("--ollama-model", default="granite3.2-vision:2b", help="Ollama model name")
    parser.add_argument("--batch", action="store_true", help="Process directory in batch mode")
    parser.add_argument("--info", action="store_true", help="Show conversion setup information")
    parser.add_argument("--verbose", "-v", action="store_true", help="Enable verbose logging")
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # Initialize converter
    converter = PDFToMarkdownConverter(
        use_llm=args.use_llm,
        use_gpu=not args.no_gpu,
        ollama_url=args.ollama_url,
        ollama_model=args.ollama_model
    )
    
    if args.info:
        info = converter.get_conversion_info()
        print(json.dumps(info, indent=2))
        return
    
    if not args.input:
        parser.error("Input file or directory is required unless using --info")
    
    input_path = Path(args.input)
    
    if not input_path.exists():
        logger.error(f"Input path not found: {args.input}")
        sys.exit(1)
    
    # Determine if batch processing
    if args.batch or input_path.is_dir():
        # Batch processing
        results = converter.convert_batch(str(input_path), args.output)
        
        # Print summary
        successful = sum(results.values())
        total = len(results)
        print(f"\nConversion Summary:")
        print(f"Total files: {total}")
        print(f"Successful: {successful}")
        print(f"Failed: {total - successful}")
        
        if total - successful > 0:
            print("\nFailed files:")
            for file_path, success in results.items():
                if not success:
                    print(f"  - {file_path}")
        
        sys.exit(0 if successful == total else 1)
    
    else:
        # Single file processing
        success = converter.convert_single_pdf(str(input_path), args.output)
        sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()